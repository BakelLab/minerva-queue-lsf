#!/usr/bin/perl

# 11.04.2010 12:26:08 EDT
# Harm van Bakel <hvbakel@gmail.com>

# MODULES
use strict;
use warnings;
use Getopt::Long;

# GLOBALS
$ENV{PBS_OUTPUT}  ||= "$ENV{HOME}/pbs-output";    # Folder with pbs output files

# ARGUMENTS
my $sHelp         = 0;
my $nFileCount    = 0;
my $sPrefix       = '';
my $flVerbose     = 0;
my $nHead         = 0;
my $nTail         = 0;
my $flRemove      = 0;
GetOptions("help!"     => \$sHelp,
           "number:i"  => \$nFileCount,
           "prefix:s"  => \$sPrefix,
           "verbose!"  => \$flVerbose,
           "start:i"   => \$nHead,
           "tail:i"    => \$nTail,
           "remove!"   => \$flRemove);
           
# PRINT HELP
my $sScriptName = ($0 =~ /^.*\/(.+$)/) ? $1 : $0;
if ($sHelp) {
   die <<HELP

   $sScriptName [-pnvr]

   Check the exit status of recently finished jobs. Can be used to make sure that
   all jobs in a large job submission finished successfully.
    
   Options:
    -p -prefix <string>
      Show exit status of jobs whose output file name starts with a specified prefix
    -n -number <integer>
      Show exit status of the n most recently finished jobs (can be used in combination with -p)
    -v -verbose
      Show output for failed jobs
    -s -start <integer>
      Limit verbose output to first s lines. Default: no limit
    -t -tail <integer>
      Limit verbose output to last t lines. Default: no limit
    -r -remove
      Remove the output for failed or missing jobs
    -h -help
      This help message
      
HELP
}


##########
## MAIN ##
##########

# Fail gracefully if the log folders don't exist
die "Error: The job output folder does not exist\n" unless (-d $ENV{PBS_OUTPUT});

# Sort the output files by modification date
opendir my($dir), $ENV{PBS_OUTPUT} or die "Can't open $ENV{PBS_OUTPUT} : $!\n";
my @asFiles = grep { -f "$ENV{PBS_OUTPUT}/$_" } readdir $dir;
@asFiles    = sort { eval('-M "$ENV{PBS_OUTPUT}/$a" <=> -M "$ENV{PBS_OUTPUT}/$b"') } @asFiles;
my $nTotalJobOutputFiles = scalar(@asFiles);

# Filter on prefix
if ($sPrefix) {
   my @asTmpFiles;
   foreach my $sFile (@asFiles){
      push @asTmpFiles, $sFile if ($sFile =~ /$sPrefix/);
   }
   @asFiles = @asTmpFiles;
}

# Set the number of files to check
if ($nFileCount){
   $nFileCount = scalar(@asFiles) if (scalar(@asFiles)<$nFileCount);
}
else{
   $nFileCount = scalar(@asFiles);
}

# Check if we have any output files to examine
if($nFileCount == 0){
   if ($nTotalJobOutputFiles){
      die "No job output files meeting criteria\n"
   }
   else{
      die "No job output files found\n";
   }
}

# Process exit status
my @asErrors;
my @asMissing;
my $rhExitStatus = parse_exitstatus($ENV{PBS_OUTPUT});
for (my $i=$nFileCount-1; $i>=0; $i--){
   if (exists $rhExitStatus->{$asFiles[$i]} ){
      push @asErrors, $asFiles[$i] unless($rhExitStatus->{$asFiles[$i]} =~ /^0 /);
   }
   else{
      push @asMissing, $asFiles[$i];
   }
}

if ($flRemove){
   # Remove the output of jobs with errors
   if (@asErrors or @asMissing){
      my $nCount = scalar(@asErrors) + scalar(@asMissing);
      my $sCount = $nCount==1 ? "1 job" : "$nCount jobs";
      foreach my $sJob (@asErrors, @asMissing){
         unlink glob "$ENV{PBS_OUTPUT}/$sJob";
      }
      print "\nRemoved output of $sCount with non-zero or missing exit status\n\n";
   }
   else{
      print "\nNo jobs with non-zero or missing exit status found for removal\n\n";
   }
}
else{
   # Print the result
   if (@asErrors and @asMissing){
      my $nOKcount = $nFileCount - @asMissing - @asErrors;
      print_missing(@asMissing);
      print_errors(\@asErrors, $rhExitStatus, $flVerbose);
      print_other_job_stats($nOKcount, $nFileCount);
   }
   elsif (@asErrors){
      my $nOKcount = $nFileCount - @asErrors;
      print_errors(\@asErrors, $rhExitStatus, $flVerbose);
      print_other_job_stats($nOKcount, $nFileCount);
   }
   elsif (@asMissing){
      my $nOKcount = $nFileCount - @asMissing;
      print_missing(@asMissing);
      print_other_job_stats($nOKcount, $nFileCount);
   }
   else{
      if ($nFileCount == scalar($nTotalJobOutputFiles)){
         print "\nAll $nFileCount jobs with output in $ENV{PBS_OUTPUT} exited normally\n\n";
      }
      else{
         if ($nFileCount == 1){
            print "\nThe last job with output in $ENV{PBS_OUTPUT} exited normally\n\n";
         }
         else{
            print "\nThe last $nFileCount jobs with output in $ENV{PBS_OUTPUT} exited normally\n\n";
         }
      }
   }
}


#################
## SUBROUTINES ##
#################

# parse_exitstatus
#
# Grab exit status of all jobs in pbs output folder
sub parse_exitstatus {
   my ($sFolder) = @_;
   my %hExitStatus;
   my ($sFileName, $sStatus) = ("","");
   open JOB, "tail -v -c 100 $sFolder/* |" or die "Error: can't parse exit status: $!'\n";
   while (<JOB>){
      next if /^\s*$/;
      $sFileName   = $1 if (/\=\=\> (.*) \<\=\=/);
      $sFileName   =~ s/$sFolder\/*//;
      if (/\=\=\> Exit status    \: (.*)$/){
         $hExitStatus{$sFileName} = $1 if ($sFileName);
         $sFileName = "";
      }
   }
   close JOB;
   return \%hExitStatus;
}

# print_missing
#
# Print list of IDs that have no info in server logs
sub print_missing {
   my @asArray = @_;
   print "\n-------------------------------------------------------\n";
   print "| No exit information found in these job output files |\n";
   print "-------------------------------------------------------\n";
   my $sRelPath = $ENV{PBS_OUTPUT};
   $sRelPath =~ s/^$ENV{HOME}/~/;

   # Process missing
   foreach my $sJobFile (@asArray){
      if ($flVerbose){
         print "  \e[1;31m$sRelPath/$sJobFile\e[0m\n";
         my $sJobOutput = join("/", $ENV{PBS_OUTPUT}, $sJobFile);
         open OUT, $sJobOutput or die "Can't open $sJobOutput: $!\n";
         while (<OUT>){print "     $_";}
         close OUT;
      }
      else{
         print "  $sRelPath/$sJobFile\n";
      }
   }

}

# print_errors
#
# Print jobs that exited with an error
sub print_errors {
   my ($raErrors, $rhExitStatus, $flVerbose) = @_;
   print "\n-------------------------------------------------------\n";
   print "| The following jobs failed with non-zero exit status |\n";
   print "-------------------------------------------------------\n";
   my $sRelPath = $ENV{PBS_OUTPUT};
   $sRelPath =~ s/^$ENV{HOME}/~/;

   # Process errors
   foreach my $sJobFile (@$raErrors){
      if ($flVerbose){
         print "  \e[1;31m$sRelPath/$sJobFile ==> $rhExitStatus->{$sJobFile}\e[0m\n";
         my $sJobOutput = join("/", $ENV{PBS_OUTPUT}, $sJobFile);
         open OUT, $sJobOutput or die "Can't open $sJobOutput: $!\n";
         while (<OUT>){print "     $_";}
         close OUT;
      }
      elsif ($nHead){
         print "  \e[1;31m$sRelPath/$sJobFile ==> $rhExitStatus->{$sJobFile}\e[0m\n";
         my $sJobOutput = join("/", $ENV{PBS_OUTPUT}, $sJobFile);
         open OUT, "head -n $nHead $sJobOutput|" or die "Can't open $sJobOutput: $!\n";
         while (<OUT>){print "     $_";}
         close OUT;
      }
      elsif ($nTail){
         print "  \e[1;31m$sRelPath/$sJobFile ==> $rhExitStatus->{$sJobFile}\e[0m\n";
         my $sJobOutput = join("/", $ENV{PBS_OUTPUT}, $sJobFile);
         open OUT, "tail -n $nTail $sJobOutput|" or die "Can't open $sJobOutput: $!\n";
         while (<OUT>){print "     $_";}
         close OUT;
      }
      else{
         print "  $sRelPath/$sJobFile ==> $rhExitStatus->{$sJobFile}\n";
      }
   }
}

# print_other_job_stats
#
# print_other_job_stats
sub print_other_job_stats {
   my ($nOKcount, $nFileCount) = @_;
   my $sOKmessage = $nOKcount==1   ? "job" : "jobs";
   my $sEXmessage = $nFileCount==1 ? "file" : "files";
   print "\n$nOKcount other $sOKmessage exited normally ($nFileCount job output $sEXmessage examined).\n\n";
}
