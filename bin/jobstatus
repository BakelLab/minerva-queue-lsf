#!/usr/bin/perl

# 18.01.2010 12:52:40 EST
# Harm van Bakel <hvbakel@gmail.com>

# MODULES
use strict;
use warnings;
use Getopt::Long;
use Env '@PATH';

# GLOBAL
$ENV{BJOBS} ||= "bjobs";
my @asStatusCodes = ('RUN','PEND','PSUSP','USUSP','SSUSP','PROV');

# GET PARAMETERS
my $flHelp       = 0;
my $flProcInfo   = 0;
my $flGpuInfo    = 0;
my $sWebUser     = "";
my $sServer      = "";
GetOptions("help!"      => \$flHelp,
           "cpuinfo!"   => \$flProcInfo,
           "pcpuinfo!"  => \$flProcInfo,
           "gpuinfo!"   => \$flGpuInfo,
           "web:s"      => \$sWebUser,
           "server:s"   => \$sServer);

# PRINT HELP
if ($flHelp) {
   my $sScriptName = ($0 =~ /^.*\/(.+$)/) ? $1 : $0;
   die <<HELP

   Usage: $sScriptName [-scgh]

   Gives a brief summary of all running and queued jobs.
   
   Options: 
    -s -server <string>
      Show queue information for a different server
    -w --webuser
      Specify user when called from web server
    -h -help
      This help message
   
HELP
}


##########
## MAIN ##
##########

# Set webuser
my $sCurrentUser = $sWebUser ? $sWebUser : $ENV{USER};

# Check whether the BJOBS binary exist in path
my $flBJOBSExists = grep -x "$_/$ENV{BJOBS}", @PATH;
die "Error: BJOBS is not installed on this system\n" unless($flBJOBSExists);

# Collect job or CPU count stats
my %hUserStats;
my %hQueueStats;
my %hTotalStats;
my $sQueueCmd = $sServer ? join('', $ENV{BJOBS}, ' @',$sServer) : $ENV{BJOBS};
open BJOBS, "bjobs -X -u all -o 'jobid user stat queue' |" or die "Error: could not run 'BJOBS' to get job status report: $!\n";
while (<BJOBS>){
   s/^\s+//;
   next if (/^JOBID/);
   s/[\n\r]+$//;
   my ($id,$user,$status,$queue) = split /\s+/, $_, -1;
   if ($queue){
      if ($sWebUser){
         $user = "aaaaa*${user}" if ($user eq $sCurrentUser);
      }
      else{
         $user = "zzzzz*\e[0;46m${user}\e[0m" if ($user eq $sCurrentUser);
      }
      $hUserStats{$user}{$queue}{$status}++;
      $hQueueStats{$queue}{$status}++;
      $hTotalStats{$status}++;
   }
}
close BJOBS;

# Figure out which columns should be displayed
my @asJobStatus;
foreach my $sStatus (@asStatusCodes){
   push @asJobStatus, $sStatus if (exists $hTotalStats{$sStatus});
}

# Print header
my $sHeader = sprintf("%-12s %-14s", 'User', 'Queue');
foreach my $sStatus (@asJobStatus){
   $sHeader .= sprintf(" %-8s", $sStatus);
}
print '=' x length($sHeader) . "\n$sHeader\n" . '-' x length($sHeader) . "\n";

# Print user stats
foreach my $user (sort(keys(%hUserStats))) {
   foreach my $queue (sort(keys(%{$hUserStats{$user}}))) {
      if ($user =~ /^zzzzz\*/){
         my $formatted = $user;
         $formatted =~ s/^zzzzz\*//;
         print sprintf("%-23s %-14s", $formatted, $queue);
      }
      elsif ($user =~ /^aaaaa\*/){
         my $formatted = $user;
         $formatted =~ s/^aaaaa\*//;
         print sprintf("%-12s %-14s", $formatted, $queue);
      }
      else{
         print sprintf("%-12s %-14s", $user, $queue);
      }
      foreach my $status (@asJobStatus){
         if (exists($hUserStats{$user}{$queue}{$status})){
            print sprintf(" %-8s", $hUserStats{$user}{$queue}{$status});
         }
         else{
            print sprintf(" %-8s", 0);
         }
      }
      print "\n";
   }
}

# Print queue stats
print '-' x length($sHeader) . "\n";
foreach my $queue (sort(keys(%hQueueStats))) {
   print sprintf("%-12s %-14s", '', $queue);
   foreach my $status (@asJobStatus){
      if (exists($hQueueStats{$queue}{$status})){
         print sprintf(" %-8s", $hQueueStats{$queue}{$status});
      }
      else{
         print sprintf(" %-8s", 0);
      }
   }
   print "\n";
}

# Print totals
print " " x 13 . "-" x (length($sHeader)-13) . "\n";
print sprintf("%-12s %-14s", '', 'totals');
foreach my $status (@asJobStatus){
   if (exists($hTotalStats{$status})){
      print sprintf(" %-8s", $hTotalStats{$status});
   }
   else{
      print sprintf(" %-8s", 0);
   }
}
print "\n";
