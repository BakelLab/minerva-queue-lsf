#!/usr/bin/perl

# 11.04.2010 11:33:45 EDT
# Harm van Bakel <hvbakel@gmail.com>

# GLOBALS
$ENV{SJOB_OUTPUT} ||= "$ENV{HOME}/lsf-output";   # Folder with lsf output files
$ENV{SJOB_CPUS}        ||= 1;                    # Default number of CPUs per node
$ENV{SJOB_CPUMEM}      ||= 2.5;                  # Default memory allocation per CPU in Gb
$ENV{SJOB_WALLTIME}    ||= 24;                   # Default walltime in hours
$ENV{SJOB_NODES}       ||= 1;                    # Default number of nodes
$ENV{SJOB_DEFALLOC}    ||= '';                   # Default allocation
$ENV{BSUB}             ||= 'bsub';               # Location of bsub binary
$ENV{TEMPDIR}          ||= "/tmp";               # Location of temp dir
$SIG{'INT'}=$SIG{'HUP'}=$SIG{'ABRT'}=$SIG{'QUIT'}=$SIG{'TRAP'}=$SIG{'STOP'}=\&INTERRUPT;

# MODULES
use strict;
use warnings;
use Cwd;
use File::Temp qw(tempfile tempdir);

##########
## MAIN ##
##########

# Print help message if called without arguments
if ( (@ARGV<1) or ($ARGV[0] eq '-h') ) {
   my $sScriptName = ($0 =~ /^.*\/(.+$)/) ? $1 : $0;
   die <<HELP

   Usage: $sScriptName [walltime] [-mpcnWqsk] { <command> | selfsched <file> }

   <command>
      The command to run on the cluster. Note that any output redirection 
      or pipe symbols must be escaped, i.e. \\> or \\|

   selfsched <file>
      File with commands (one per line) to run through the selfsched utility using
      the resources requested with submitjob
   
   Options: 
    walltime <integer>
       The expected run time of the job, measured in hours. Default: $ENV{SJOB_WALLTIME} 
    -c -cpu <integer>
       The number of CPUs required per node. Default: $ENV{SJOB_CPUS}
    -n -nodes <integer>
       The number of nodes required. Default: $ENV{SJOB_NODES}
    -m -mem <integer>
       The total amount of memory used by the job in Gb. Default: $ENV{SJOB_CPUMEM} * (No. of CPUs)
    -q -queue <string>
       Target queue. Default: autoselect best queue based on run time and project allocation
    -P -project <string>
       Project allocation to use for this job
    -a -architecture <string>
       Optionally specify the type of node: 'mothra' for intel nodes or 'manda' for AMD nodes.
    -s -sem <string>
       Optional name of a file to append job IDs to
    -k -checkpoint <string>
       Automatically checkpoint a job every hour to the checkpoint directory specified here.
    -app <string>
       Specify an application profile. E.g. mpi switch configuration, checkpointing

   Job STDERR will be merged with STDOUT and redirected to $ENV{SJOB_OUTPUT}
   Any job exceeding the requested run time and memory limits will be killed automatically.
    
HELP
}

# Set up job output and TMP directories
unless (-e $ENV{SJOB_OUTPUT}) { mkdir($ENV{SJOB_OUTPUT}) or die "Could not create '$ENV{SJOB_OUTPUT}' for lsf job output: $!\n"};

# Copy default settings
my $nTotalMem     = -1;
my $nCpus         = $ENV{SJOB_CPUS};
my $nNodes        = $ENV{SJOB_NODES};
my $nReqTime      = $ENV{SJOB_WALLTIME};
my $sAllocation   = $ENV{SJOB_DEFALLOC};

# Check submitjob arguments
my $flCheckForArgs = 1;
my $sWalltime      = "$nReqTime:00";
my $sSemaphore     = "";
my $sQueue         = "";
my $sCheckpoint    = "";
my $flDebug        = 0;
my $flSelfSched    = 0;
my $sAppProfile    = "";
my $sArchitecture  = "";
while($flCheckForArgs){
   if ($ARGV[0] =~ /^(\d+)\.*\d*$/){
      $nReqTime = shift @ARGV;
      my $nDecimal = $nReqTime - int($nReqTime);
      if ($nDecimal){
         my $nMin = int($nDecimal*60)+1;
         $sWalltime = "$1:$nMin";
      }
      else{
         $sWalltime = "$1:00";
      }
   }
   elsif($ARGV[0] =~ /(^-m)|(^--mem)|(^-mem)/){
      die "Error: insufficient arguments\n" unless (@ARGV >= 2);
      shift @ARGV;
      $nTotalMem = shift @ARGV;
      die "Error: amount of memory must be a number\n" unless($nTotalMem =~ /^\d+\.*\d*$/);
   }
   elsif($ARGV[0] =~ /(^-c)|(^--cpu)|(^-cpu)/){
      die "Error: insufficient arguments\n" unless (@ARGV >= 2);
      shift @ARGV;
      $nCpus = shift @ARGV;
      die "Error: number of CPUs per node must be a number greater than 1\n" unless( ($nCpus =~ /^\d+$/) and ($nCpus >= 0) );
   }
   elsif($ARGV[0] =~ /(^-n)|(^--nodes)|(^-nodes)/){
      die "Error: insufficient arguments\n" unless (@ARGV >= 2);
      shift @ARGV;
      $nNodes = shift @ARGV;
      die "Error: number of nodes must be a number greater than 1\n" unless( ($nNodes =~ /^\d+$/) and ($nNodes >= 0) );
   }
   elsif($ARGV[0] =~ /(^-s)|(^--sem)|(^-sem)/){
      die "Error: insufficient arguments\n" unless (@ARGV >= 2);
      shift @ARGV;
      $sSemaphore = shift @ARGV;
   }
   elsif($ARGV[0] =~ /^--debug/){
      shift @ARGV;
      $flDebug = 1;
   }
   elsif($ARGV[0] =~ /(^-q)|(^--queue)|(^-queue)/){
      die "Error: insufficient arguments\n" unless (@ARGV >= 2);
      shift @ARGV;
      $sQueue = shift @ARGV;
   }
   elsif($ARGV[0] =~ /(^-k)|(^--checkpoint)|(^-checkpoint)/){
      die "Error: insufficient arguments\n" unless (@ARGV >= 2);
      shift @ARGV;
      $sCheckpoint = shift @ARGV;
   }
   elsif($ARGV[0] =~ /(^-a)|(^--architecture)|(^-architecture)/){
      die "Error: insufficient arguments\n" unless (@ARGV >= 2);
      shift @ARGV;
      $sArchitecture = lc(shift @ARGV);
   }
   elsif($ARGV[0] =~ /(^-P)|(^--project)|(^-project)|(^-A)|(^--allocation)|(^-allocation)/){
      die "Error: insufficient arguments\n" unless (@ARGV >= 2);
      shift @ARGV;
      $sAllocation = shift @ARGV;
   }
   elsif (lc($ARGV[0]) =~ /^selfsched/){
      shift @ARGV;
      $flSelfSched = 1;
   }
   elsif($ARGV[0] =~ /^-app/){
      die "Error: insufficient arguments\n" unless (@ARGV >= 2);
      shift @ARGV;
      $sAppProfile = shift @ARGV;
   }
   else{
      $flCheckForArgs = 0;
   }
   $flCheckForArgs = 0 unless @ARGV;
}

# Check if we have a job command
die "Error: missing job command\n" unless @ARGV;

# Check architecture
if ($sArchitecture){
   die "Error: unknown node architecture '$sArchitecture' specified. Choose either 'mothra' for intel nodes, or 'manda' for AMD nodes.\n" unless ($sArchitecture =~ /^(mothra|manda)$/);
}

# Set default queue with some basic routing depending on requested run time
unless ($sQueue){
   if ($sAllocation){
      $sQueue = $nReqTime <= 2 ? "expressalloc" : "alloc";
   }
   else{
      $sQueue = "scavenger";
   }
}

# Set the job resources
my $nNcpus      = $nNodes * $nCpus;
my $nProcMem    = $nTotalMem < 0 ? int($ENV{SJOB_CPUMEM} * 1024) : int(($nTotalMem * 1024) / $nNcpus);
my $sResSpan    = $nNodes        ? "\n#BSUB -R span[ptile=$nCpus]"  : "";
my $sResMem     = $nProcMem      ? "\n#BSUB -R rusage[mem=$nProcMem]"  : "";
my $sLsfQueue   = $sQueue        ? "\n#BSUB -q $sQueue"  : "";
my $sLsfAlloc   = $sAllocation   ? "\n#BSUB -P $sAllocation": "";
my $sLsfCheckpt = $sCheckpoint   ? "\n#BSUB -k \"$sCheckpoint init=5 60 method=blcr\"": "";
my $sLsfAppProf = $sAppProfile   ? "\n#BSUB -app $sAppProfile": "";
my $sLsfArch    = $sArchitecture ? "\n#BSUB -m $sArchitecture": "";

# Format the job name
my $sJobName = $ARGV[0];
$sJobName    =~ s/^ +//;  # Remove leading spaces
$sJobName    =~ s/ .*$//; # Remove anything following a space
$sJobName    =~ s/.*\///; # Remove the path before any command
$sJobName    =~ s/\&//;   # Remove any ampersands
$sJobName    =~ s/^\d+//; # Remove any leading digits, otherwise bsub will throw an error
$sJobName    =  substr($sJobName,0,12); # Make sure job name does not exceed max length

# Set up the job command depending on whether this is a self-scheduling run or an inline-command submission
my ($sJobCmd, $sJobFmt) = ("","");
if ($flSelfSched){
   die "Error: the 'selfsched' command only takes one argument as input\n" unless (@ARGV == 1);
   die "Error: the selfsched input file '$ARGV[0]' does not exist\n" unless (-e $ARGV[0]);
   $sJobCmd  = "module load selfsched\n";
   $sJobCmd .= "export fstatus=$sJobName.`echo \$BSUB_JOBID | awk -F. '{print \$1}'`selfsched.status\n";
   $sJobCmd .= "mpirun -np $nNcpus selfsched < $ARGV[0]";
   $sJobFmt  = "mpirun -np $nNcpus selfsched < $ARGV[0]";
}
else{
   # Do smart quoting, i.e. if arguments contain characters that were escaped in the input command,
   # make sure they are single-quoted in the output. This was added to facilitate submission of 
   # inline awk or matlab commands
   for (my $i=0 ; $i<@ARGV ; $i++ ){
      if ($ARGV[$i] =~ /'/){                                             # Handles matlab commands with single-quoted strings
         $ARGV[$i] = "\"$ARGV[$i]\"" unless ($ARGV[$i] =~ /^(\$|'|")/);  # double-quote argument unless it starts with $ (e.g. $'\t' ) or " or '
      }
      elsif ($ARGV[$i] =~ /[\${[\]!} ]/){                                # Handles awk, sed and other matlab commands
         $ARGV[$i] = "'$ARGV[$i]'" unless ($ARGV[$i] =~ /'/ or $ARGV[$i] =~/TMPSHMDIR/); # Single-quote unless it's already single-quoted or we're passing TMPSHMDIR as an argument
      }
      elsif ($ARGV[$i] eq 'awkt'){                                       # Alias for running awk with tab as separator
         $ARGV[$i] = 'awk -F \'\t\' -v OFS=\'\t\'';
      }
      elsif ($ARGV[$i] eq 'sortt'){                                      # Alias for running sort with tab as separator
         $ARGV[$i] = 'sort -t $\'\t\'';
      }
      else{
         # Nothing to see here, move along
      }
   }
   
   # Join arguments
   $sJobCmd =  join(' ', @ARGV);
   $sJobFmt =  $sJobCmd;
   $sJobFmt =~ s/\$/\\\$/g;  # Escape $, otherwise literal variables will be subsituted during 'echo'
   $sJobFmt =~ s/\"/\\\"/g;  # Escape ", otherwise they will be lost during 'echo'
}

# Write the job script to a temporary file
my $sCwd     =  getcwd;
my @asPath   =  split(/\//, $sCwd);
my $sExecDir =  pop @asPath;
my ($fhTmpOut, $sTmpOut) = tempfile('submitjob-XXXXX', DIR=>$ENV{TEMPDIR}, UNLINK=>1);
print $fhTmpOut <<SUBMIT;
#!/bin/bash
#BSUB -oo $ENV{SJOB_OUTPUT}/%J.OU
#BSUB -n $nNcpus
#BSUB -W $sWalltime
#BSUB -E "mkdir -p -m 700 /dev/shm/\$LSB_JOBID"
#BSUB -Ep "rm -rf /dev/shm/\$LSB_JOBID"
#BSUB -J $sJobName$sLsfQueue$sLsfAlloc$sResSpan$sResMem$sLsfCheckpt$sLsfAppProf$sLsfArch
cd $sCwd
echo -E '==> Run command    :' "$sJobFmt"
echo    '==> Execution host :' `hostname`
if [ -e /dev/shm/\$LSB_JOBID ]
then
   export TMPSHMDIR=/dev/shm/\$LSB_JOBID
else
   export TMPSHMDIR=\$TMPDIR
fi
$sJobCmd
SUBMIT
close $fhTmpOut;

# Submit job or print job submission script, depending on whether we're running in debug mode
if ($flDebug){
   open DEBUG, $sTmpOut or die "Error: can't open temporary bsub file\n";
   while (<DEBUG>){
      print;
   }
   close DEBUG;
}
else{
   # Now submit the job script and catch the job ID
   my $sJobID = "";
   my $flSubmitted = 0;
   while(not($flSubmitted)){
      open BSUB, "$ENV{BSUB} < $sTmpOut|" or die "Error: can't execute bsub command: $!\n";
      while (<BSUB>){
         next if (/^\s*$/);
         next if (/^ *#/);
         s/[\n\r]+$//;
         $sJobID = $_;
         last;
      }
      close BSUB;
      
      # Make sure job was successfully submitted by checking if we got a jobID back
      if ($sJobID =~ /^Job \<\d+\>/){
         $flSubmitted = 1;
      }
      else{
         warn "Submission failed, retrying in 5 seconds\n";
         sleep 5;
      }
   }
   
   # Write the job ID to the semaphore file if requested
   if ($sSemaphore){
      my $nJobID = $sJobID;
      $nJobID =~ s/\..*$//;
      $nReqTime = int($nReqTime/24)+1;
      open SEM, ">>$sSemaphore" or die "Error: could not write job ID to semaphore file";
      print SEM join("\t", $nJobID, $nReqTime), "\n";
      close SEM;
      warn "$sJobID written to $sSemaphore\n";
   }
   else{
      warn "$sJobID\n";
   }
}

#################
## SUBROUTINES ##
#################

# INTERRUPT
#
# Interrupt routine, make sure we exit gracefully for tmp file cleanup
sub INTERRUPT{
   exit(1); # This will call END
}
